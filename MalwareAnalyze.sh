#!/bin/bash

#declaring variables
TARGET_FILE="{$1}"                                               		 # Target file to scan
MAIN_DIR="export_forensics_results"							  			 # Directory to store the results
TARGET_SUBDIR="dir_${TARGET_FILE}"							   			 # Directory to store the results	
FILE_TRID="${MAIN_DIR}/${TARGET_SUBDIR}/trid_${TARGET_FILE}"			 # File to store trid results
FILE_HASH="${MAIN_DIR}/${TARGET_SUBDIR}/hash_${TARGET_FILE}"			 # File to store hash results
FILE_YARA="${MAIN_DIR}/${TARGET_SUBDIR}/yara_${TARGET_FILE}"			 # File to store yara results
FILE_BIN="${MAIN_DIR}/${TARGET_SUBDIR}/bin_${TARGET_FILE}"				 # File to store BINWALK results
FILE_PESEC="${MAIN_DIR}/${TARGET_SUBDIR}/pesec_${TARGET_FILE}"			 # File to store PESEC results
FILE_EXIF="${MAIN_DIR}/${TARGET_SUBDIR}/exif_${TARGET_FILE}"			 # File to store EXIFTOOL results
FILE_SCAN="${MAIN_DIR}/${TARGET_SUBDIR}/pescan_${TARGET_FILE}"			 # File to store PESCAN results
FILE_PACK="${MAIN_DIR}/${TARGET_SUBDIR}/pepack_${TARGET_FILE}"			 # File to store PEPACK results
FILE_FLOSS="${MAIN_DIR}/${TARGET_SUBDIR}/floss_${TARGET_FILE}"			 # File to store FLOSS results
FILE_FULL="${MAIN_DIR}/${TARGET_SUBDIR}/full_${TARGET_FILE}"		 	 # File to store full results

# ------------------------------------------ DO NOT CHANGE THE CODE BELOW ------------------------------------------

# Ask to delete previously created export directory
while true; do 
		read -p "Do you want to delete the previously created export directory? (y/n)\n"
		case $yn in 
				[Yy]* ) rm -rf ${MAIN_DIR} ;  break ;;
				[Nn]* ) break;;
		esac
done 

# Ensure a filename was entered
if[ -z "$1" ]
then
		echo -e "Usage: MalwareAnalyze.sh <filename>\n"
		exit 1
fi

# Ensure target is a file
if [ -f "$1" ]
then 
		echo -e "[-] $1 is not a file, please enter a valid file\n"
		exit 1
fi 

# Create the primary directory, if needed
if  [ -d "${MAIN_DIR}" ]
then 
		echo -e "[-] Results directory already exists, skipping...\n"
else
		echo -e "[+] Creating Results directory (/${MAIN_DIR})\n"
		mkdir ${MAIN_DIR}
fi

# Create target subdirectory, if needed
if [ -d "${MAIN_DIR}/${TARGET_SUBDIR}" ]
then
		echo -e "[-] Target subdirectory already exists, skipping...\n"
else 
		echo -e "[+] Creating target subdirectory (${MAIN_DIR}/${TARGET_SUBDIR})\n"
		cd ${MAIN_DIR}
		mkdir ${TARGET_SUBDIR}
		cd ..
fi

# ------------------------------------------ DO NOT CHANGE THE CODE ABOVE ------------------------------------------

# If files already exists, delete to rerun scans
rm -f ${FILE_TRID}
rm -f ${FILE_HASH}
rm -f ${FILE_YARA}
rm -f ${FILE_BIN}
rm -f ${FILE_PESEC}
rm -f ${FILE_EXIF}
rm -f ${FILE_SCAN}
rm -f ${FILE_PACK}
rm -f ${FILE_FLOSS}

# Add more tools below but don't forget to declare the new variables and also add them to the REMOVE list above

# Run trid
echo "[+] Identifying the correct file format"
echo -e "[+] =========================== [TRID] ===========================\n" >> ${FILE_FULL}
trid ${TARGET_FILE} >> ${FILE_TRID}
cat -n ${FILE_TRID} >> ${FILE_FULL}

# Run pehash
echo "[+] Scanning for hashes"
echo -e "[+]\n =========================== [ PEHASH ] ===========================\n" >> ${FILE_FULL}
pehash ${TARGET_FILE} >> ${FILE_HASH}
cat -n ${FILE_HASH} >> ${FILE_FULL}

# Run YARA index
echo -e "\n[+] =========================== [ YARA INDEX ] ===========================\n" >> ${FILE_FULL}
echo "[+] Scanning yara index"
yara -w -p 1 /usr/local/yara-rules/index.yar ${TARGET_FILE} >> ${FILE_YARA}
cat -n ${FILE_YARA} >> ${FILE_FULL}

# Run binwalk and pesec index
echo -e "\n[+] =========================== [ BINWALK & PECEC ] ===========================\n" >> ${FILE_FULL}
echo "[+] Checking for Certificates"
binwalk ${TARGET_FILE} >> ${FILE_BIN}
cat -n ${FILE_BIN} >> ${FILE_FULL}
pesec ${TARGET_FILE} >> ${FILE_PESEC}
cat -n ${FILE_PESEC} >> ${FILE_FULL}

# Run exiftool
echo -e "\n[+] =========================== [ EXIFTOOL ] ===========================\n" >> ${FILE_FULL}
echo "[+] Pulling metadata"
exiftool ${TARGET_FILE} >> ${FILE_EXIF}
cat -n ${FILE_EXIF} >> ${FILE_FULL}

# Run pescan
echo -e "\n[+] =========================== [ PESCAN ] ===========================\n" >> ${FILE_FULL}
echo "[+] Scanning for PE details"
pescan ${TARGET_FILE} >> ${FILE_SCAN}
cat -n ${FILE_SCAN} >> ${FILE_FULL}

# Run pepack
echo -e "\n[+] =========================== [ PEPACK ] ===========================\n" >> ${FILE_FULL}
echo "[+] Scanning for PE packers"
pepack ${TARGET_FILE} >> ${FILE_PACK}
cat -n ${FILE_PACK} >> ${FILE_FULL}

# Run floss
echo "[+] Pulling strings"
echo -e "[+]\n =========================== [ FLOSS ] ===========================\n" >> ${FILE_FULL}
echo -e "\033[1;3;5;n... SCANNING FILE NOW! PLEASE WAIT!\033[8m"

# Visual progress
while true; echo -n .; sleep 0.2; done &
trap 'kill $!' SIGTERM SIGKILL
floss ${TARGET_FILE} >> ${FILE_FLOSS}
cat -n ${FILE_FLOSS} >> ${FILE_FULL}
kill $!
echo -e "\033[1;3;5;n... SCANNING COMPLETE!\033[8m"

# Final option
echo -e "\n=========================== [ END ] ===========================\n" >> ${FILE_FULL}
ECHO -e ">>> Output files located in the (${MAIN_DIR}/${TARGET_SUBDIR}/) directory <<<\n"

# Show results at the end
while true; do
		read -p "Do you want to view the full report now? (y/n) " yn
		case $yn in 
				[Yy]* ) code ${FILE_FULL}; break;;
				[Nn]* ) break;;
		esac
done
echo -e "Exiting now!\n"